version: 2.1

orbs:
  hmpps: ministryofjustice/hmpps@10
  slack: circleci/slack@5
  cypress: cypress-io/cypress@3.4.2
  docker: circleci/docker@2.8.1
  mem: circleci/rememborb@0.0.2

parameters:
  alerts-slack-channel:
    type: string
    # Normally team specific alert channel e.g. hmpps_tech_alerts, syscon-alerts, dps_sed_alerts
    # This is to avoid a general alert dumping ground that no-one then monitors
    default: em-engineers-moj-madetech

  releases-slack-channel:
    type: string
    # Normally dps-releases for most teams / projects
    default: em-engineers-moj-madetech

  node-version:
    type: string
    default: 20.18-browsers

executors:
  integration-testing:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
      - image: wiremock/wiremock:latest
        environment:
          WIREMOCK_OPTIONS: '--port 9091 --verbose'
      - image: quay.io/hmpps/hmpps-electronic-monitoring-create-an-order:Build.<< pipeline.git.revision >>
        environment:
          PORT: 3007
          HMPPS_AUTH_URL: http://localhost:9091/auth
          TOKEN_VERIFICATION_API_URL: http://localhost:9091/verification
          TOKEN_VERIFICATION_ENABLED: true
          REDIS_ENABLED: false
          NODE_ENV: development
          API_CLIENT_ID: clientid
          API_CLIENT_SECRET: clientsecret
          SYSTEM_CLIENT_ID: clientid
          SYSTEM_CLIENT_SECRET: clientsecret
          ENVIRONMENT_NAME: dev
          CEMO_API_URL: http://localhost:9091/cemo

  scenario-testing:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
      - image: postgres:14
        environment:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
      - image: redis:7.2
      - image: wiremock/wiremock:latest
        environment:
          WIREMOCK_OPTIONS: '--port 9091 --verbose'
      - image: quay.io/hmpps/hmpps-electronic-monitoring-create-an-order-api
        environment:
          SERVER_PORT: 8080
          DB_SERVER: localhost
          DB_NAME: postgres
          DB_USER: postgres
          DB_PASS: postgres
          HMPPS_AUTH_URL: http://localhost:9091/auth
          CLIENT_ID: clientid
          CLIENT_SECRET: clientsecret
          DOCUMENT_MANAGEMENT_URL: http://localhost:9091/hmpps
          SERCO_AUTH_URL: http://localhost:9091/auth/oauth/token
          SERCO_CLIENT_ID: clientid
          SERCO_CLIENT_SECRET: clientsecret
          SERCO_USERNAME: serco
          SERCO_PASSWORD: serco
          SERCO_URL: http://localhost:9091/fms
          CP_INTEGRATION_ENABLED: false
      - image: quay.io/hmpps/hmpps-electronic-monitoring-create-an-order:Build.<< pipeline.git.revision >>
        environment:
          PORT: 3007
          HMPPS_AUTH_URL: http://localhost:9091/auth
          TOKEN_VERIFICATION_API_URL: http://localhost:9091/verification
          TOKEN_VERIFICATION_ENABLED: true
          REDIS_ENABLED: false
          NODE_ENV: development
          API_CLIENT_ID: clientid
          API_CLIENT_SECRET: clientsecret
          SYSTEM_CLIENT_ID: clientid
          SYSTEM_CLIENT_SECRET: clientsecret
          ENVIRONMENT_NAME: dev
          CEMO_API_URL: http://localhost:8080

commands:
  create_app_version:
    description: |
      Creates an application version string, formatted [DATE].[CIRCLE_BUILD_NUM].[SHORT_SHA1] e.g 2020-04-24.487.fb30e99" Also uses mem/rememborb orb to remember the version as the env var APP_VERSION - which can be recalled in subsequent steps or jobs e.g. mem/recall
    steps:
      - run:
          command: |
            DATE=$(date '+%Y-%m-%d')
            SHORT_SHA1=$(echo $CIRCLE_SHA1 | cut -c1-7)
            VERSION=${DATE}.${CIRCLE_BUILD_NUM}.${SHORT_SHA1}
            echo "Created version string: ${VERSION}"
            echo "export VERSION=$VERSION" >> $BASH_ENV
          name: Create app version string
      - mem/remember:
          env_var: APP_VERSION
          value: ${VERSION}

jobs:
  build:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - run:
          name: Update npm
          command: sudo npm install -g npm@latest
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm ci --no-audit
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
            - ~/.cache
      - run:
          command: npm run build
      - run: # Run linter after build because the integration test code depend on compiled typescript...
          name: Linter check
          command: npm run lint
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - build
            - dist

  unit_test:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: unit tests
          command: npm run test:ci
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: test_results/unit-test-reports.html

  integration_test:
    executor: integration-testing
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - cypress/install
      - cypress/run-tests:
          cypress-command: npm run int-test
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: integration_tests/videos
      - store_artifacts:
          path: integration_tests/screenshots

  scenario_test:
    executor: scenario-testing
    parallelism: 4 # use 4 CircleCI machines to distribute specs
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - cypress/install
      - cypress/run-tests:
          cypress-command: npm run int-test-scenarios -- --env split=true,spec=integration_tests/scenarios/**/*
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: integration_tests/videos
      - store_artifacts:
          path: integration_tests/screenshots

  tag_docker:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    parameters:
      tag:
        type: string
        description: docker tag to be added to the image
    steps:
      - attach_workspace:
          at: ~/app
      - setup_remote_docker:
          docker_layer_caching: true
      - create_app_version
      - mem/recall:
          env_var: APP_VERSION
      - run: |
          docker login -u="${QUAYIO_USERNAME}" -p="${QUAYIO_PASSWORD}" quay.io
          docker load --input docker_cache/build_image.tar
          docker image tag quay.io/hmpps/hmpps-electronic-monitoring-create-an-order:${APP_VERSION} quay.io/hmpps/hmpps-electronic-monitoring-create-an-order:<< parameters.tag >>
          docker push quay.io/hmpps/hmpps-electronic-monitoring-create-an-order:<< parameters.tag >>

workflows:
  build-test-and-deploy:
    jobs:
      - hmpps/helm_lint:
          name: helm_lint
      - docker/hadolint:
          name: docker_lint
          trusted-registries: docker.io,quay.io
      - build:
          filters:
            tags:
              ignore: /.*/
      - unit_test:
          requires:
            - build
      - hmpps/build_docker:
          name: build_docker
          requires:
            - build
            - docker_lint
          persist_container_image: true
          additional_docker_tag: Build.<< pipeline.git.revision >>
      - integration_test:
          requires:
            - unit_test
            - build_docker
      - scenario_test:
          requires:
            - unit_test
            - build_docker
      - tag_docker:
          name: tag_verified_container
          tag: verified-<< pipeline.git.revision >>
          requires:
            - scenario_test
            - integration_test
      - hmpps/deploy_env:
          name: deploy_dev
          env: 'dev'
          jira_update: true
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          context: hmpps-common-vars
          filters:
            branches:
              only:
                - main
          requires:
            - integration_test
            - scenario_test
            - helm_lint
          helm_timeout: 5m
      - tag_docker:
          name: tag_dev_container
          tag: deployed-dev
          requires:
            - deploy_dev
      - hmpps/deploy_env:
          name: deploy_preprod
          env: 'preprod'
          jira_update: true
          jira_env_type: staging
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          context:
            - hmpps-common-vars
            - hmpps-ems-cemo-ui-preprod
          filters:
            branches:
              only:
                - main
          requires:
            - deploy_dev
          helm_timeout: 5m
      - tag_docker:
          name: tag_preprod_container
          tag: deployed-preprod
          requires:
            - deploy_preprod
      - hmpps/deploy_env:
          name: deploy_prod
          env: 'prod'
          jira_update: true
          jira_env_type: production
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          slack_notification: true
          slack_channel_name: hmpps-ems-cemo-notifications
          context:
            - hmpps-common-vars
            - hmpps-ems-cemo-ui-prod
          requires:
            - deploy_preprod
          helm_timeout: 5m
      - tag_docker:
          name: tag_prod_container
          tag: deployed-prod
          requires:
            - deploy_prod

  security:
    triggers:
      - schedule:
          cron: '30 5 * * 1-5'
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/npm_security_audit:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          node_tag: << pipeline.parameters.node-version >>
          context:
            - hmpps-common-vars
      - hmpps/trivy_latest_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
      - hmpps/veracode_pipeline_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars
  security-weekly:
    triggers:
      - schedule:
          cron: '0 5 * * 1'
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/veracode_policy_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars
