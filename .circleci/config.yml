version: 2.1

orbs:
  hmpps: ministryofjustice/hmpps@10
  slack: circleci/slack@5

parameters:
  alerts-slack-channel:
    type: string
    # Normally team specific alert channel e.g. hmpps_tech_alerts, syscon-alerts, dps_sed_alerts
    # This is to avoid a general alert dumping ground that no-one then monitors
    default: em-engineers-moj-madetech

  releases-slack-channel:
    type: string
    # Normally dps-releases for most teams / projects
    default: em-engineers-moj-madetech

  node-version:
    type: string
    default: 20.17-browsers

executors:
  scenario-testing:
    docker:
      - image: cimg/node:20.18.0-browsers
      - image: postgres:14
        environment:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
      - image: redis:7.2
      - image: wiremock/wiremock:latest
        environment:
          WIREMOCK_OPTIONS: '--port 9091 --verbose'
      - image: quay.io/hmpps/hmpps-electronic-monitoring-create-an-order-api:latest
        environment:
          SERVER_PORT: 8080
          DB_SERVER: localhost
          DB_NAME: postgres
          DB_USER: postgres
          DB_PASS: postgres
          HMPPS_AUTH_URL: http://localhost:9091/auth
          CLIENT_ID: clientid
          CLIENT_SECRET: clientsecret
          DOCUMENT_MANAGEMENT_URL: http://localhost:9091/hmpps
          SERCO_AUTH_URL: http://localhost:9091/auth/oauth/token
          SERCO_CLIENT_ID: clientid
          SERCO_CLIENT_SECRET: clientsecret
          SERCO_USERNAME: serco
          SERCO_PASSWORD: serco
          SERCO_URL: http://localhost:9091/fms
          CEMO_FMS_INTEGRATION_ENABLED: true
          HMPPS_S3_BUCKETNAME: test_bucket

  intgration-testing:
      - image: redis:7.2
      - image: wiremock/wiremock:latest
        environment:
          WIREMOCK_OPTIONS: '--port 9091 --verbose'
      - image: gotenberg/gotenberg:8
        command:
          - "gotenberg"
          - "--api-port=3000"
          - "--chromium-ignore-certificate-errors"
          - "--api-timeout=30s"
          - "--pdfengines-engines=pdftk"
          - "--uno-listener-restart-threshold=0"
jobs:
  build:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - run:
          name: Update npm
          command: sudo npm install -g npm@latest
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm ci --no-audit
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
            - ~/.cache
      - run:
          command: |
            npm run build
      - run: # Run linter after build because the integration test code depend on compiled typescript...
          name: Linter check
          command: npm run lint
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - build
            - dist

  unit_test:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    environment:
      TZ: Europe/London
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: unit tests
          command: npm run test:ci
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: test_results/unit-test-reports.html

  integration_test:
    executor: intgration-testing
    environment:
      TZ: Europe/London
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Install missing OS dependency
          command: sudo apt-get install libxss1
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}    
      - run:
          name: Run the node app
          command: npm run start-feature
          background: true
      - run:
          name: Wait for node app to start
          command: sleep 5
      - run:
          name: integration tests
          command: npm run int-test
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: integration_tests/videos
      - store_artifacts:
          path: integration_tests/screenshots

  scenario_test:
    executor: scenario-testing
    environment:
      TZ: Europe/London
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Update npm
          command: sudo npm install -g npm@latest
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm ci --no-audit
      - run:
          command: npm run build
      - run:
          name: Run the node app
          command: npm run start-scenarios
          background: true
      - run:
          name: Wait for node app to start
          command: sleep 5
      - run:
          name: Run scenario tests
          command: npm run int-test-scenarios
      - run:
          name: Archive screenshots
          command: tar -czf integration_tests/screenshots.tar.gz integration_tests/screenshots
      - run:
          name: Archive requests
          command: tar -czf integration_tests/requests.tar.gz integration_tests/requests
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: integration_tests/videos
      - store_artifacts:
          path: integration_tests/screenshots.tar.gz
      - store_artifacts:
          path: integration_tests/requests.tar.gz

workflows:
  build-test-and-deploy:
    jobs:
      - build:
          filters:
            tags:
              ignore: /.*/
      - unit_test:
          requires:
            - build
      - integration_test:
          requires:
            - build
      - scenario_test:
          requires:
            - build
      - hmpps/helm_lint:
          name: helm_lint
      - hmpps/build_docker:
          name: build_docker
          filters:
            branches:
              only:
                - main
      - hmpps/deploy_env:
          name: deploy_dev
          env: 'dev'
          jira_update: true
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          context: hmpps-common-vars
          filters:
            branches:
              only:
                - main
          requires:
            - helm_lint
            - unit_test
            - integration_test
            - build_docker
          helm_timeout: 5m
      - hmpps/deploy_env:
          name: deploy_preprod
          env: 'preprod'
          jira_update: true
          jira_env_type: staging
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          context:
            - hmpps-common-vars
            - hmpps-ems-cemo-ui-preprod
          filters:
            branches:
              only:
                - main
          requires:
            - deploy_dev
          helm_timeout: 5m
      - hmpps/deploy_env:
          name: deploy_prod
          env: 'prod'
          jira_update: true
          jira_env_type: production
          pipeline_id: <<pipeline.id>>
          pipeline_number: <<pipeline.number>>
          slack_notification: true
          slack_channel_name: hmpps-ems-cemo-notifications
          context:
            - hmpps-common-vars
            - hmpps-ems-cemo-ui-prod
          requires:
            - deploy_preprod
          helm_timeout: 5m

  security:
    triggers:
      - schedule:
          cron: '30 5 * * 1-5'
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/npm_security_audit:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          node_tag: << pipeline.parameters.node-version >>
          context:
            - hmpps-common-vars
      - hmpps/trivy_latest_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
      - hmpps/veracode_pipeline_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars
  security-weekly:
    triggers:
      - schedule:
          cron: '0 5 * * 1'
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/veracode_policy_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars
