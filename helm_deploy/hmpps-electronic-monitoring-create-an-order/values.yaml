generic-service:
  nameOverride: hmpps-electronic-monitoring-create-an-order
  productId: 'HMPPS529' # productId for the product that this belongs too, i.e. DPS001, see README.md for details

  # the IRSA service account name for accessing AWS resources
  # serviceAccountName: "hmpps-electronic-monitoring-create-an-order"

  replicaCount: 4

  image:
    repository: quay.io/hmpps/hmpps-electronic-monitoring-create-an-order
    tag: app_version # override at deployment time
    port: 3000

  ingress:
    enabled: true
    host: app-hostname.local # override per environment
    tlsSecretName: hmpps-ems-cemo-ui-cert

  livenessProbe:
    httpGet:
      path: /ping

  readinessProbe:
    httpGet:
      path: /ping

  # Environment variables to load into the deployment
  env:
    NODE_ENV: 'production'
    REDIS_ENABLED: 'true'
    REDIS_TLS_ENABLED: 'true'
    TOKEN_VERIFICATION_ENABLED: 'true'
    APPLICATIONINSIGHTS_CONNECTION_STRING: 'InstrumentationKey=$(APPINSIGHTS_INSTRUMENTATIONKEY);IngestionEndpoint=https://northeurope-0.in.applicationinsights.azure.com/;LiveEndpoint=https://northeurope.livediagnostics.monitor.azure.com/'
    AUDIT_SQS_REGION: 'eu-west-2'
    AUDIT_SERVICE_NAME: 'HMPPS529' # Your audit service name
    VARIATIONS_ENABLED: 'true'
    MAPPA_ENABLED: 'false'
    ACTIVE_AGENCIES: 'DNI,WEI,HDI,HLI,HMI,LEI,LHI,MDI'
    GOTENBERG_API_URL: http://hmpps-electronic-monitoring-create-an-order-gotenberg

  # Pre-existing kubernetes secrets to load as environment variables in the deployment.
  # namespace_secrets:
  #   [name of kubernetes secret]:
  #     [name of environment variable as seen by app]: [key of kubernetes secret to load]

  namespace_secrets:
    hmpps-electronic-monitoring-create-an-order:
      APPINSIGHTS_INSTRUMENTATIONKEY: 'APPINSIGHTS_INSTRUMENTATIONKEY'
      API_CLIENT_ID: 'API_CLIENT_ID'
      API_CLIENT_SECRET: 'API_CLIENT_SECRET'
      SYSTEM_CLIENT_ID: 'SYSTEM_CLIENT_ID'
      SYSTEM_CLIENT_SECRET: 'SYSTEM_CLIENT_SECRET'
      SESSION_SECRET: 'SESSION_SECRET'
    elasticache-redis:
      REDIS_HOST: 'primary_endpoint_address'
      REDIS_AUTH_TOKEN: 'auth_token'
    sqs-hmpps-audit-secret:
      AUDIT_SQS_QUEUE_URL: 'sqs_queue_url'
      AUDIT_SQS_QUEUE_NAME: 'sqs_queue_name'

  allowlist:
    groups:
      - digital_staff_and_mojo
      - moj_cloud_platform

gotenberg:
  nameOverride: gotenberg
  replicaCount: 2

  image:
    repository: gotenberg/gotenberg
    tag: 8.21.1
    port: 3000

  containerCommand: [ "gotenberg" ]
  containerArgs:
    [
      "--chromium-ignore-certificate-errors",
      "--pdfengines-merge-engines=pdftk",
      "--libreoffice-disable-routes",
      "--webhook-disable",
      "--prometheus-disable-collect"
    ]

  ingress:
    enabled: false

  livenessProbe:
    httpGet:
      path: /health
    periodSeconds: 30
    initialDelaySeconds: 60
    timeoutSeconds: 20
    failureThreshold: 10

  readinessProbe:
    httpGet:
      path: /health
    periodSeconds: 20
    initialDelaySeconds: 60
    timeoutSeconds: 30
    failureThreshold: 15

  podSecurityContext:
    fsGroup: 1001

  securityContext:
    runAsUser: 1001
    privileged: false
    runAsNonRoot: true

generic-prometheus-alerts:
  targetApplication: hmpps-electronic-monitoring-create-an-order
